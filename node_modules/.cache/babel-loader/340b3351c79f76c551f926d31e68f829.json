{"ast":null,"code":"const FIREBASE_DOMAIN = 'https://react-c79d1-default-rtdb.firebaseio.com/';\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n  const transformedQuotes = [];\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n  return transformedQuotes;\n}\n\n// export async function getSingleQuote(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not fetch quote.');\n//   }\n\n//   const loadedQuote = {\n//     id: quoteId,\n//     ...data,\n//   };\n\n//   return loadedQuote;\n// }\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n  const transformedComments = [];\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n}","map":{"version":3,"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","quoteId","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"sources":["D:/React Router Project 2/09-time-to-practice-starting-code (1)/09-time-to-practice-starting-code/src/components/lib/api.js"],"sourcesContent":["const FIREBASE_DOMAIN = 'https://react-c79d1-default-rtdb.firebaseio.com/';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\n// export async function getSingleQuote(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not fetch quote.');\n//   }\n\n//   const loadedQuote = {\n//     id: quoteId,\n//     ...data,\n//   };\n\n//   return loadedQuote;\n// }\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"],"mappings":"AAAA,MAAMA,eAAe,GAAG,kDAAkD;AAE1E,OAAO,eAAeC,YAAY,GAAG;EACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,cAAa,CAAC;EAC9D,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,yBAAyB,CAAC;EAC5D;EAEA,MAAMC,iBAAiB,GAAG,EAAE;EAE5B,KAAK,MAAMC,GAAG,IAAIN,IAAI,EAAE;IACtB,MAAMO,QAAQ,GAAG;MACfC,EAAE,EAAEF,GAAG;MACP,GAAGN,IAAI,CAACM,GAAG;IACb,CAAC;IAEDD,iBAAiB,CAACI,IAAI,CAACF,QAAQ,CAAC;EAClC;EAEA,OAAOF,iBAAiB;AAC1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO,eAAeK,QAAQ,CAACC,SAAS,EAAE;EACxC,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,cAAa,EAAE;IAC7DgB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC;IAC/BK,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMhB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,yBAAyB,CAAC;EAC5D;EAEA,OAAO,IAAI;AACb;AAEA,OAAO,eAAea,UAAU,CAACC,WAAW,EAAE;EAC5C,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,aAAYsB,WAAW,CAACC,OAAQ,OAAM,EAAE;IACtFP,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,WAAW,CAACE,WAAW,CAAC;IAC7CJ,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMhB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,wBAAwB,CAAC;EAC3D;EAEA,OAAO;IAAEiB,SAAS,EAAErB,IAAI,CAACsB;EAAK,CAAC;AACjC;AAEA,OAAO,eAAeC,cAAc,CAACJ,OAAO,EAAE;EAC5C,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,aAAYuB,OAAQ,OAAM,CAAC;EAE3E,MAAMnB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,yBAAyB,CAAC;EAC5D;EAEA,MAAMoB,mBAAmB,GAAG,EAAE;EAE9B,KAAK,MAAMlB,GAAG,IAAIN,IAAI,EAAE;IACtB,MAAMyB,UAAU,GAAG;MACjBjB,EAAE,EAAEF,GAAG;MACP,GAAGN,IAAI,CAACM,GAAG;IACb,CAAC;IAEDkB,mBAAmB,CAACf,IAAI,CAACgB,UAAU,CAAC;EACtC;EAEA,OAAOD,mBAAmB;AAC5B"},"metadata":{},"sourceType":"module"}